#!/usr/bin/env ruby

require 'rubygems'
require 'commander'
require 'bind'

program :name, 'Bind'
program :version, Bind::VERSION::STRING
program :description, 'Bind actions to filesystem events'
 
command :to do |c|
  c.syntax = 'bind to <file> [file ...] [options] '
  c.summary = 'Bind to modification of a file'
  c.description = 'Bind to modification of a file or all files within a directory.'
  c.example 'Bind to a single file, logging its path when changed', "bind change style.css -e 'puts file'"
  c.option '-e', '--eval STRING', 'Evaluate a string of Ruby in context of Bind, so the file local variable is available.', String
  c.option '-i', '--interval SECONDS', 'Interval in seconds in which to listen for an event.', Integer
  c.option '-t', '--timeout SECONDS', 'Timeout after n seconds.', Integer
  c.option '-r', '--require LIBS', 'Require ruby libraries.', Array
  c.option '-V', '--verbose', 'Log information to STDOUT.'
  c.when_called do |args, options|
    # fix commander strings? ... --eval ' .... '
    options.require.each { |lib| require lib } if options.require
    options.log = $stdout if options.verbose
    options.action = lambda { |file| eval options.eval } if options.eval
    options.files = args
    listener = Bind::Listener.new options_to_hash(options)
    listener.run!
  end
end

def options_to_hash options
  options.singleton_methods.inject({}) do |hash, meth| 
    hash[meth.to_sym] = options.send meth unless meth =~ /=$/
    hash
  end
end