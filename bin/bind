#!/usr/bin/env ruby

require 'rubygems'
require 'commander'
require 'bind'

program :name, 'Bind'
program :version, Bind::VERSION::STRING
program :description, 'Bind actions to filesystem events'
 
command :to do |c|
  c.syntax = 'bind to <file> [file ...] [options] '
  c.summary = 'Bind to modification of a file'
  c.description = 'Bind to modification of a file or all files within a directory.'
  c.example 'Bind to a single file, logging its path when changed', "bind change foo.css -e 'puts file'"
  c.example 'Refresh a browser to the specific uri when altered, twice per second', "bind to style.css -s 'open -a -g Safari /uri/to/refresh' -i 500"
  c.option '-r', '--require', 'Require a ruby library.'
  c.option '-e', '--eval', 'Evaluate a string of Ruby in context of Bind, so the file local variable is available.'
  c.option '-s', '--shell', 'Evaluate a string of shell script with the file passed as an argument.'
  c.option '-i', '--interval', 'Interval in milliseconds in which to listen for an event.'
  c.option '-I', '--interval-sec', 'Interval in seconds in which to listen for an event. Defaults to 1 second'
  c.option '-t', '--timeout', 'Timeout after n seconds.'
  c.when_called do |args, options|
    bind.
      to('style.css', 'styles').
      on('change', lambda { |file| exec 'open -a -g Safari /uri/to/refresh' }).
      wait(1.second).
      timeout_after(5.seconds).
      log_to($stdout)
  end
end

action  = Bind::Action.new :proc => lambda { ... }
binding = Bind::Listener.new :event => :change, :files => ['style.css', 'styles'], :action => action, :timeout => 5.seconds, :log => $stdout, :sleep => 1.second