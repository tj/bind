#!/usr/bin/env ruby

require 'rubygems'
require 'bind'
require 'bind/command_helpers'
require 'commander/import'

program :name, 'rbind'
program :version, Bind::VERSION
program :description, 'Bind actions to filesystem events'

command :to do |c|
  set_common_options c
  c.syntax = 'rbind to <path> [path ...] [options] '
  c.summary = 'Bind to a file system event'
  c.description = 'Bind to modification of a file or files within a directory.'
  c.example 'Bind to a single file, logging its path when changed', "rbind to style.css -e 'puts file.path'"
  c.example 'Bind to a file, and a directory of files', "rbind to stylesheets style.css -e 'puts file.path'"
  c.example 'Run specs when ruby files are modified', "rbind to 'lib/**/*.rb' -e 'system \"rake spec\"'"
  c.action do |args, options|
    abort 'invalid option. --eval switch is required in order to perform any action on the bound file(s)' unless options.eval
    common_options options
    options.paths = args
    listener(options).run!
  end
end

command :refresh do |c|
  set_common_options c
  c.syntax = 'rbind refresh <uri> [options]'
  c.summary = 'Bind to <uri>, refreshing browsers.'
  c.description = 'Bind to <uri>, refreshing browsers when the paths you are watching change.'
  c.example 'Bind a few css files for quick editing in multiple browsers', 'bind refresh http://localhost/page --files style.css,reset.css --browsers Safari,Firefox'
  c.example 'Bind local static html (no scheme)', 'bind refresh examples/demo.html -f style.css -b Safari'
  c.option '-b', '--browsers BROWSERS', Array, 'List of browsers you wish to refresh. Defaults to Safari'
  c.option '-p', '--paths PATHS', Array, 'List of files, directories, or globs to bind to'
  c.action do |args, options|
    common_options options
    uri = expand_path args.shift
    browsers = options.browsers || ['Safari']
    options.actions << Bind::Actions::RefreshBrowsers.new(uri, *browsers)
    abort 'invalid option. --paths switch is required in order to bind' if options.paths.nil?
    listener(options).run!
  end
end
